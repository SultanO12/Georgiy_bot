import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from data.config import ADMINS
from loader import dp, db, bot
import pandas as pd
from keyboards.default.main_panel import *
from keyboards.default.chapter import *
from keyboards.inline.admin_inline import * 
from states.send_msg import *
from states.admin_state import *
import openpyxl

@dp.message_handler(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", user_id=ADMINS, state='*')
@dp.message_handler(text="/exel", user_id=ADMINS, state='*')
async def do_admin_panel(message: types.Message, state: FSMContext):
    def createTable(data):
        wb = openpyxl.Workbook()
        sheet = wb.active
        sheet['A1'] = 'Telegram ID'
        sheet['B1'] = '–ò–º—è'
        sheet['C1'] = '–§–∞–º–∏–ª–∏—è'
        sheet['D1'] = '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏–µ'
        sheet['E1'] = '–¢–µ–ª–µ—Ñ–æ–Ω'
        for i, row in enumerate(data, start=2):
            if len(row) >= 5:
                sheet['A{}'.format(i)] = row[0]
                sheet['B{}'.format(i)] = row[1]
                sheet['C{}'.format(i)] = row[2]  
                sheet['D{}'.format(i)] = row[3]
                sheet['E{}'.format(i)] = row[4]

        wb.save('table.xlsx')


    users = await db.select_all_register_info()
    users_list = []

    for i in users:
        user_id = i['id']
        user = await db.select_user(id=int(user_id))
        telegram_id = user['telegram_id']
        users_list.append([str(telegram_id), str(i['name']), str(i['last_name']), str(i['date']), str(i['phone'])])
    createTable(users_list)

    with open('table.xlsx', 'rb') as file:
        await message.answer_document(file)

@dp.message_handler(text="/set_aks", user_id=ADMINS, state='*')
async def update_aks(message: types.Message, state: FSMContext):
    await message.answer("Text:")
    await CreatCatAks.capton.set()

@dp.message_handler(user_id=ADMINS, state=CreatCatAks.capton)
async def update_aks(message: types.Message, state: FSMContext):
    aks = await db.select_all_infomation3()
    if aks:
        await db.update_infomation3(id=aks['id'], caption=message.text)
        await message.answer("–ê–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await db.add_infomation3(caption=message.text)
        await message.answer("–ê–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.finish()

@dp.message_handler(text="/cleandb", user_id=ADMINS)
async def get_all_users(message: types.Message):
    await db.delete_users()
    await message.answer("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.message_handler(text="/clean_exel", user_id=ADMINS)
async def get_all_users(message: types.Message):
    await db.delete_reginfor()
    await message.answer("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.message_handler(text="üîª–ú–µ–Ω—é", user_id=ADMINS, state=EditChap.cat)
@dp.message_handler(text="üîª–ú–µ–Ω—é", user_id=ADMINS, state=EditChap.chapter)
@dp.message_handler(text="/panel", user_id=ADMINS, state='*')
async def do_admin_panel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=main_admin_markup)

@dp.message_handler(text="üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", user_id=ADMINS)
async def get_count_users(message: types.Message):
    users = await db.count_users()
    await message.answer(users)

@dp.message_handler(text="üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", user_id=ADMINS)
async def get_all_users(message: types.Message):
    users = await db.select_all_users()
    id = []
    name = []
    for user in users:
        id.append(user[-1])
        name.append(user[1])
    data = {
        "Telegram ID": id,
        "Name": name
    }
    pd.options.display.max_rows = 10000
    df = pd.DataFrame(data)
    if len(df) > 50:
        for x in range(0, len(df), 50):
            await bot.send_message(message.chat.id, df[x:x + 50])
    else:
       await bot.send_message(message.chat.id, df)

@dp.message_handler(text="üìã –†–∞–∑–¥–µ–ª—ã", user_id=ADMINS)
async def do_cat(message: types.Message, state: FSMContext):
    await state.finish()
    
    msg = f"<b>–†–∞–∑–¥–µ–ª—ã:</b>\n\n1. üè° –î–æ–º–∏–∫–∏\n2. ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ\n3. üéâ –ê–∫—Ü–∏–∏"
    await message.answer(msg, reply_markup=chapters_markup)
    await EditChap.chapter.set()


@dp.message_handler(text=["1", "2", "3"], state=EditChap.chapter, user_id=ADMINS)
async def get_cat(message: types.Message, state: FSMContext):
    cat = message.text
    if cat == "1":
        markup = await creat_homs_markup()
        await message.answer("–†–∞–∑–¥–µ–ª üè° –î–æ–º–∏–∫–∏:", reply_markup=markup)
        await state.update_data({"capter_name":"üè° –î–æ–º–∏–∫–∏"})
        await EditChap.cat.set()
    elif cat == "2":
        markup = await creat_markup_raz()
        await message.answer("–†–∞–∑–¥–µ–ª ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ:", reply_markup=markup)
        await state.update_data({"capter_name":"ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"})
        await EditChap.cat.set()
    else:
        markup = await creat_markup_aks()
        await message.answer("–†–∞–∑–¥–µ–ª üéâ –ê–∫—Ü–∏–∏:", reply_markup=markup)
        await state.update_data({"capter_name":"üéâ –ê–∫—Ü–∏–∏"})
        await EditChap.cat.set()

@dp.message_handler(text="üîô –ù–∞–∑–∞–¥", user_id=ADMINS, state=EditChap.cat)
async def back_1(message: types.Message, state: FSMContext):
    await state.finish()
    
    msg = f"<b>–†–∞–∑–¥–µ–ª—ã:</b>\n\n1. üè° –î–æ–º–∏–∫–∏\n2. ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ\n3. üéâ –ê–∫—Ü–∏–∏"
    await message.answer(msg, reply_markup=chapters_markup)
    await EditChap.chapter.set()

@dp.message_handler(text=['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '‚ûï –î–æ–±–∞–≤–∏—Ç—å a–∫—Ü–∏—é'], state=EditChap.cat, user_id=ADMINS)
async def creat_cat(message: types.Message, state: FSMContext):
    data = await state.get_data()
    chapter_name = data['capter_name']

    if chapter_name == "üè° –î–æ–º–∏–∫–∏":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        await CreatCatHome.title.set()

    elif chapter_name == "ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        await CreatCatRaz.title.set()

    elif chapter_name == "üéâ –ê–∫—Ü–∏–∏":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        await CreatCatAks.title.set()

@dp.message_handler(state=CreatCatHome.title, user_id=ADMINS)
async def get_title(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"title":message.text})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞:")
        await CreatCatHome.capton.set()

@dp.message_handler(state=CreatCatHome.capton, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"caption":message.text})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º <b>2</b> —Ñ–æ—Ç–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        await CreatCatHome.photos.set()


@dp.message_handler(state=CreatCatHome.photos, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"photos":message.text})
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ë–µ–∑ –≤–∏–¥–µ–æ"))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∏–¥–µ–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        await CreatCatHome.video.set()

    

@dp.message_handler(state=CreatCatHome.photos, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        photos = message.text
        data = await state.get_data()
        title = data['title']
        caption = data['caption']
        if message.text == "–ë–µ–∑ –≤–∏–¥–µ–æ":
            video = None
        else:
            video = message.text

        # await db.add_infomation(title, caption, photos, video)
        await state.finish()
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞", reply_markup=main_admin_markup)

@dp.message_handler(state=CreatCatRaz.title, user_id=ADMINS)
async def get_title(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"title":message.text})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await CreatCatRaz.capton.set()

@dp.message_handler(state=CreatCatRaz.capton, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"caption":message.text})
        await message.answer("<b>1</b> —Ñ–æ—Ç–æ ID:")
        await CreatCatRaz.photo.set()

@dp.message_handler(state=CreatCatRaz.photo, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        photos = message.text
        data = await state.get_data()
        title = data['title']
        caption = data['caption']

        await db.add_infomation2(title, caption, photos)
        await state.finish()
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞", reply_markup=main_admin_markup)

@dp.message_handler(state=CreatCatAks.title, user_id=ADMINS)
async def get_title(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data({"title":message.text})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
        await CreatCatAks.capton.set()

@dp.message_handler(state=CreatCatAks.capton, user_id=ADMINS)
async def get_caption(message: types.Message, state: FSMContext):
    if message.text:
        data = await state.get_data()
        title = data['title']
        capton = message.text
        await db.add_infomation3(title, capton)

        await state.finish()
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞", reply_markup=main_admin_markup)


@dp.message_handler(state=EditChap.cat, user_id=ADMINS)
async def get_cat(message: types.Message, state: FSMContext):
    data = await state.get_data()
    chapter_name = data['capter_name']
    
    if chapter_name == "üè° –î–æ–º–∏–∫–∏":
        titles = await db.select_all_infomation()
        for title in titles:
            if message.text == title['title']:
                await message.answer(f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {title['title']}?", reply_markup=check_markup)
                await state.update_data({"title":message.text})
                await EditChap.check.set()
                break
    elif chapter_name == "ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ":
        titles = await db.select_all_infomation2()
        for title in titles:
            if message.text == title['title']:
                await message.answer(f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {title['title']}?", reply_markup=check_markup)
                await state.update_data({"title":message.text})
                await EditChap.check.set()
                break
    elif chapter_name == "üéâ –ê–∫—Ü–∏–∏":
        titles = await db.select_all_infomation3()
        for title in titles:
            if message.text == title['title']:
                await message.answer(f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {title['title']}?", reply_markup=check_markup)
                await state.update_data({"title":message.text})
                await EditChap.check.set()
                break

@dp.callback_query_handler(text=['yes', 'no'], state=EditChap.check, user_id=ADMINS)
async def check3(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()

    data = await state.get_data()
    chapter_name = data['capter_name']
    title = data['title']
    if call.data == 'yes':
        if chapter_name == "üè° –î–æ–º–∏–∫–∏":
            await db.delete_info(title)
            await state.finish()
            await call.message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_admin_markup)
        elif chapter_name == "ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ":
            await db.delete_info2(title)
            await state.finish()
            await call.message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_admin_markup)
        elif chapter_name == "üéâ –ê–∫—Ü–∏–∏":
            await db.delete_info3(title)
            await state.finish()
            await call.message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_admin_markup)
    else:
        await call.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–µ–Ω–æ!")
        await state.finish()
    
        msg = f"<b>–†–∞–∑–¥–µ–ª—ã:</b>\n\n1. üè° –î–æ–º–∏–∫–∏\n2. ü•≥ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ\n3. üéâ –ê–∫—Ü–∏–∏"
        await call.message.answer(msg, reply_markup=chapters_markup)
        await EditChap.chapter.set()



@dp.message_handler(state=EditChap.chapter, user_id=ADMINS)
async def get_chap(message: types.Message, state: FSMContext):
    chapter = message.text

    chapters = await db.select_all_chapters()
    chapter_id = ''
    for chap in chapters:
        if chapter == str(chap['chapter_name']):
            await state.update_data({"chpter":chapter})
            await state.update_data({"chapter_id":chap['id']})
            chapter_id += str(chap['id'])
            break

    msg = "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"

    catigories = await db.select_all_categories()
    if catigories:
        for cat in catigories:
            if chapter_id == str(cat['chapter_id']):
                msg += f"{cat['cat_name']}"

        if len(msg) <= 14: 
            await message.answer(msg)
        else:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞—Ç–∏–≥–æ—Ä–∏ –ø–æ —Ä–∞–∑–¥–µ–ª—É {chapter}", reply_markup=addcat_markup)
    else:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏:", reply_markup=addcat_markup)

@dp.message_handler(text="üó£ –†–∞—Å—Å—ã–ª–∫–∞ (—Ñ–æ—Ç–æ)", user_id=ADMINS)
async def rass(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ID <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>:", reply_markup=cancellations)
    await GetMessage.msg2.set()

@dp.message_handler(content_types=['text'], state=GetMessage.msg2)
async def get_msg(message: types.Message, state: FSMContext):
    photo_ids = message.text.split()
    await state.update_data({"photo_ids":photo_ids})
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç—å–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await GetMessage.caption.set()

@dp.message_handler(content_types=['text'], state=GetMessage.caption)
async def get_msg(message: types.Message, state: FSMContext): 
    data = await state.get_data()
    photo_ids = data['photo_ids'][:-1]
    photo_id_caption = photo_ids[-1]
    caption = message.text

    sms = await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª—Å—è...")
    users = await db.select_all_users()

    media = types.MediaGroup()
    for photo_id in photo_ids:
        media.attach_photo(photo=photo_id)
    media.attach_photo(photo=photo_id_caption, caption=caption)
    
    for user in users:
            try:
                await bot.send_media_group(user[-1], media=media)
                await asyncio.sleep(0.05)
            except:
                await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ id - {user[-1]}")
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=sms.message_id)
    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ‚úÖ", reply_markup=main_admin_markup)

@dp.message_handler(text="üó£ –†–∞—Å—Å—ã–ª–∫–∞", user_id=ADMINS)
async def send_mg(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:", reply_markup=cancellations)
    await GetMessage.msg.set()
    
@dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", state=[GetMessage.msg, GetMessage.msg2], user_id=ADMINS)
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_admin_markup)

@dp.message_handler(content_types=['photo', 'video', 'text'], state=GetMessage.msg)
async def get_msg(message: types.Message, state: FSMContext):
    sms = await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª—Å—è...")
    users = await db.select_all_users()

    if message.photo:
        photo_id = message.photo[-1]['file_id']
        caption = message.caption

        for user in users:
            try:
                await bot.send_photo(user[-1], photo=photo_id, caption=caption)
                await asyncio.sleep(0.05)
            except:
                await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ id - {user[-1]}")
    elif message.text:
        msg = message.text

        for user in users:
            try:
                await bot.send_message(user[-1], msg)
                await asyncio.sleep(0.05)
            except:
                await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ id - {user[-1]}")
    else:
        video_id = message.video.file_id
        caption = message.caption

        for user in users:
            try:
                await bot.send_video(user[-1], video=video_id, caption=caption)
                await asyncio.sleep(0.05)
            except:
                await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ id - {user[-1]}")

    await bot.delete_message(chat_id=message.from_user.id, message_id=sms.message_id)
    await state.finish()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ‚úÖ", reply_markup=main_admin_markup)

@dp.message_handler(text="üÜî –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ ID", user_id=ADMINS)
async def do_cat(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")

@dp.message_handler(content_types=['photo'], user_id=ADMINS)
async def get_file_id(message: types.Message):
    await message.answer(message.photo[-1]['file_id'])

# @dp.message_handler(content_types=['video'], user_id=ADMINS)
# async def process_video(message: types.Message):
#     video_file_id = message.video.file_id
#     await message.reply(video_file_id)
