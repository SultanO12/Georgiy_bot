import asyncio
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from loader import dp, db, bot
from data.config import ADMINS
from utils.extra_datas import make_title
from keyboards.default.main import main_markup, register_markup
import time

async def send_ad(telegram_id):
    await asyncio.sleep(900)
    await bot.send_message(chat_id=int(telegram_id), text="–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ö–ê–ù–ê–õ - @splav40 \n\n–¢–∞–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —è—Ä–∫–∏–µ –∫–∞–¥—Ä—ã —Å –æ—Ç–¥—ã—Ö–∞ üî•‚ù§Ô∏è")

@dp.message_handler(CommandStart(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()

    full_name = message.from_user.full_name
    user = await db.select_user(telegram_id=message.from_user.id)
    if user is None:
        user = await db.add_user(
            telegram_id=message.from_user.id,
            full_name=full_name,
            username=message.from_user.username,
        )
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
    #     count = await db.count_users()
    #     msg = f"[{make_title(user['full_name'])}](tg://user?id={user['telegram_id']}) –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –±–∞–∑—É\.\n–ù–∞ –±–∞–∑–µ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\."
    #     await bot.send_message(chat_id=ADMINS[0], text=msg, parse_mode=types.ParseMode.MARKDOWN_V2)
    # else:
    #     await bot.send_message(chat_id=ADMINS[0], text=f"[{make_title(full_name)}](tg://user?id={message.from_user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Ä–∞–Ω–µ–µ", disable_web_page_preview=True, parse_mode=types.ParseMode.MARKDOWN_V2)
    
    reg_user = await db.select_register_info(user_id=int(user['id']))
    if reg_user:
            await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª—ç–º–ø–∏–Ω–≥ ¬´–ù–∞ –∫—Ä–∞—é –∑–µ–º–ª–∏¬ª", reply_markup=main_markup)
            await message.answer_photo("AgACAgIAAxkBAAIgUGSsMdIyvjkOU5eZl59jfXa_-Gr5AAIKyzEbrclgSWjEkpUIb5i1AQADAgADeQADLwQ")
    else:
            await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª—ç–º–ø–∏–Ω–≥ ¬´–ù–∞ –∫—Ä–∞—é –∑–µ–º–ª–∏¬ª\n\nüòâ –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ \n–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –ü–†–û–ú–û–ö–û–î - –æ—Ç–≤–µ—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∏–∂–µ üëá", reply_markup=register_markup)
            await message.answer_photo("AgACAgIAAxkBAAIgUGSsMdIyvjkOU5eZl59jfXa_-Gr5AAIKyzEbrclgSWjEkpUIb5i1AQADAgADeQADLwQ")

    asyncio.create_task(send_ad(message.from_user.id))
    
@dp.message_handler(commands=['menu'], state='*')
async def main_menu(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer_photo("AgACAgIAAxkBAAIgUGSsMdIyvjkOU5eZl59jfXa_-Gr5AAIKyzEbrclgSWjEkpUIb5i1AQADAgADeQADLwQ", reply_markup=main_markup)