from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp, db, bot
from states.getinfo import GetRegInfo
from keyboards.default.main import *
from keyboards.inline.check_info import *

@dp.message_handler(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", state='*')
async def get_reg_info(message: types.Message, state: FSMContext):
    await state.finish()

    user = await db.select_user(telegram_id=message.from_user.id)
    reg_user = await db.select_register_info(user_id=int(user['id']))

    if reg_user is None:
      await message.answer("üñê –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
      await message.answer("‚¨áÔ∏è")

      await GetRegInfo.check_first_name.set()

@dp.message_handler(state=GetRegInfo.check_first_name)
async def check_1(message: types.Message, state: FSMContext):
    if message.text:
      name = message.text
      await message.answer(f"–í–∞—à–µ –∏–º—è \"{name}\", –≤–µ—Ä–Ω–æ?", reply_markup=check_info_markup)
      await state.update_data({"name":name})
      await GetRegInfo.first_name.set()

@dp.callback_query_handler(text=['yes', 'no'], state=GetRegInfo.first_name)
async def get_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()
    name = data['name']
    if call.data == 'yes':
      
      await call.message.answer(f"üôå {name}, –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π!")
      await call.message.answer(f"–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥ {name}, —á—Ç–æ–±—ã –º–Ω–µ –≤–∞—Å –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
      await call.message.answer("‚¨áÔ∏è")

      await GetRegInfo.check_last_name.set()
    else:
        await call.message.answer("üñê –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        await call.message.answer("‚¨áÔ∏è")

        await GetRegInfo.check_first_name.set()

@dp.message_handler(state=GetRegInfo.check_last_name)
async def check_1(message: types.Message, state: FSMContext):
    if message.text:
      last_name = message.text
      await message.answer(f"–í–∞—à–µ —Ñ–∞–º–∏–ª–∏—è \"{last_name}\", –≤–µ—Ä–Ω–æ?", reply_markup=check_info_markup)
      await state.update_data({"last_name":last_name})
      await GetRegInfo.last_name.set()

@dp.callback_query_handler(text=['yes', "no"], state=GetRegInfo.last_name)
async def get_last_name(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'yes':
        data = await state.get_data()
        name = data['name']

        await call.message.answer(f"{name}, —É –º–µ–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ –±—ã –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∞, –∞ —Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç )", reply_markup=send_number_markup)
        await call.message.answer("‚¨áÔ∏è")

        await GetRegInfo.phone.set()
    else:
        await call.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
        await call.message.answer("‚¨áÔ∏è")
        await GetRegInfo.check_last_name.set()

@dp.message_handler(content_types=['contact'], state=GetRegInfo.phone)
@dp.message_handler(state=GetRegInfo.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if message.text:
        phone = message.text
        data = await state.get_data()
        name = data['name']
        await state.update_data({"phone":phone})

        await message.answer("üòç –û—Ç–ª–∏—á–Ω–æ!\n\nüíñ –¢–µ–ø–µ—Ä—å –º—ã —Å—Ç–∞–ª–∏ –±–ª–∏–∂–µ", reply_markup=get_date_markup)
        await message.answer(f"{name}, –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ 1000 ‚ÇΩ. \n\n–¢—ã –º–æ–∂–µ—à—å –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É –Ω–∞—Å –≥–ª—ç–º–ø–∏–Ω–≥–µ, –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–º–∏–∫–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥\n\n*—Å–º. —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ê–∫—Ü–∏–∏\"")
        await message.answer(f"{name}, —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –ø–æ —Å–µ–∫—Ä–µ—Ç—É, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.  –ê –∫–æ–≥–¥–∞ —Ç—ã —Ä–µ—à–∏—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ —É –Ω–∞—Å, —è üí´–ø–æ–¥–∞—Ä—é —Ç–µ–±–µ —Å–∫–∏–¥–∫—É–µ—â–µ –Ω–∞ 500 –†—É–±–ª–µ–π")

        await GetRegInfo.date.set()
    elif message.contact:
        phone = message.contact.phone_number
        data = await state.get_data()
        name = data['name']
        await state.update_data({"phone":phone})

        

        await message.answer("üòç –û—Ç–ª–∏—á–Ω–æ!\n\nüíñ –¢–µ–ø–µ—Ä—å –º—ã —Å—Ç–∞–ª–∏ –±–ª–∏–∂–µ", reply_markup=get_date_markup)
        await message.answer(f"{name}, –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ 1000 ‚ÇΩ. \n\n–¢—ã –º–æ–∂–µ—à—å –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É –Ω–∞—Å –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ, –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–º–∏–∫–æ–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥\n\n*—Å–º. —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ê–∫—Ü–∏–∏\"")
        await message.answer(f"{name}, —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –ø–æ —Å–µ–∫—Ä–µ—Ç—É, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.  –ê –∫–æ–≥–¥–∞ —Ç—ã —Ä–µ—à–∏—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ —É –Ω–∞—Å, —è üí´–ø–æ–¥–∞—Ä—é —Ç–µ–±–µ —Å–∫–∏–¥–∫—É –µ—â–µ –Ω–∞ 500 –†—É–±–ª–µ–π")

        await GetRegInfo.date.set()

@dp.message_handler(commands=['menu'], state=GetRegInfo.date)
@dp.message_handler(text="üîª–ú–µ–Ω—é", state=GetRegInfo.date)
async def save_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    last_name = data['last_name']
    phone = data['phone']

    user_id = await db.select_user(telegram_id=int(message.from_user.id))
    await db.add_register_info(user_id['id'], name, last_name, phone)
    await state.finish()
    await message.answer_photo("AgACAgIAAxkBAAIgUGSsMdIyvjkOU5eZl59jfXa_-Gr5AAIKyzEbrclgSWjEkpUIb5i1AQADAgADeQADLwQ", caption="–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é –∏ –∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–µ–π –±–∞–∑–æ–π!\n\n–û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–π—Ç–∏ –≤ \"<b>–î–æ–º–∏–∫–∏</b>\" - \"<b>–î–æ–º–∏–∫ –Ω–∞ –¥–µ—Ä–µ–≤–µ</b>\" –∏ –≤ \"<b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>\" - \"<b>–ö–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã</b>\". –¢–∞–º —Ç–µ–±—è –∂–¥—É—Ç üî• –∑–∞–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–µ üî• –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏\n\n–ê —Ç–∞–∫ –∂–µ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –¢–ì –∫–∞–Ω–∞–ª: @splav40 - —Ç–∞–º —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ.", reply_markup=main_markup)

@dp.message_handler(text="üéÅ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–≥–¥–∞ –î–†", state=GetRegInfo.date)
async def get_date(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n–≤ —Ñ–æ—Ä–º–∞—Ç–µ\n22.07.1999", reply_markup=ReplyKeyboardRemove())
    await message.answer("‚¨áÔ∏è")
    await GetRegInfo.get.set()
    

@dp.message_handler(state=GetRegInfo.get)
async def get(message: types.Message, state: FSMContext):
    if message.text:
        data = await state.get_data()
        name = data['name']
        last_name = data['last_name']
        phone = data['phone']
        date = message.text

        user_id = await db.select_user(telegram_id=int(message.from_user.id))
        await db.add_register_info(user_id['id'], name, last_name, phone, date=date)
        await state.finish()
        await message.answer_photo("AgACAgIAAxkBAAIgUGSsMdIyvjkOU5eZl59jfXa_-Gr5AAIKyzEbrclgSWjEkpUIb5i1AQADAgADeQADLwQ", caption="–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é –∏ –∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–µ–π –±–∞–∑–æ–π!\n\n–û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–π—Ç–∏ –≤ \"<b>–î–æ–º–∏–∫–∏</b>\" - \"<b>–î–æ–º–∏–∫ –Ω–∞ –¥–µ—Ä–µ–≤–µ</b>\" –∏ –≤ \"<b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>\" - \"<b>–ö–≤–∞–¥—Ä–æ—Ü–∏–∫–ª—ã</b>\". –¢–∞–º —Ç–µ–±—è –∂–¥—É—Ç üî• –∑–∞–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–µ üî• –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏\n\n–ê —Ç–∞–∫ –∂–µ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –¢–ì –∫–∞–Ω–∞–ª: @splav40 - —Ç–∞–º —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ.", reply_markup=main_markup)
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞ –æ—Ç 2000 —Ä—É–±–ª–µ–π.\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã - –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ê–ö–¶–ò–ò\" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ \"–û—Å–µ–Ω—å23\" –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")